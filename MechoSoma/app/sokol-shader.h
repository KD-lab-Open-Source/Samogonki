#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input MechoSoma/app/sokol/shader.glsl --output MechoSoma/app/sokol-shader.h --slang=glsl330

    Overview:

        Shader program 'back_buffer':
            Get shader desc: back_buffer_shader_desc(sg_query_backend());
            Vertex shader: quad_vs
                Attribute slots:
            Fragment shader: back_buffer_fs
                Image 'input_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_UINT
                    Bind slot: SLOT_input_texture = 0

        Shader program 'flush':
            Get shader desc: flush_shader_desc(sg_query_backend());
            Vertex shader: quad_vs
                Attribute slots:
            Fragment shader: flush_fs
                Image 'offscreen_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_offscreen_texture = 0

        Shader program 'scene':
            Get shader desc: scene_shader_desc(sg_query_backend());
            Vertex shader: scene_vs
                Attribute slots:
                    ATTR_scene_vs_pos = 0
                    ATTR_scene_vs_color0 = 1
                    ATTR_scene_vs_uv0 = 2
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: scene_fs
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Image 'texture_1':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_texture_1 = 0
                Image 'texture_2':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_texture_2 = 1


    Shader descriptor structs:

        sg_shader back_buffer = sg_make_shader(back_buffer_shader_desc(sg_query_backend()));
        sg_shader flush = sg_make_shader(flush_shader_desc(sg_query_backend()));
        sg_shader scene = sg_make_shader(scene_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'scene_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_scene_vs_pos] = { ... },
                    [ATTR_scene_vs_color0] = { ... },
                    [ATTR_scene_vs_uv0] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'quad_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_texture_1 = 0;
        SLOT_texture_2 = 1;
        SLOT_input_texture = 0;
        SLOT_offscreen_texture = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .projection_matrix = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .color_operation_1 = ...;
            .color_operation_2 = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &SG_RANGE(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_scene_vs_pos (0)
#define ATTR_scene_vs_color0 (1)
#define ATTR_scene_vs_uv0 (2)
#define SLOT_texture_1 (0)
#define SLOT_texture_2 (1)
#define SLOT_input_texture (0)
#define SLOT_offscreen_texture (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float projection_matrix[16];
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    int color_operation_1;
    int color_operation_2;
    uint8_t _pad_8[8];
} fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[4];
    layout(location = 0) in vec3 pos;
    out vec4 color;
    layout(location = 1) in vec4 color0;
    out vec2 uv;
    layout(location = 2) in vec2 uv0;
    
    void main()
    {
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(pos, 1.0);
        color = color0;
        uv = uv0;
    }
    
*/
static const char scene_vs_source_glsl330[325] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x30,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x30,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform ivec4 fs_params[1];
    uniform sampler2D texture_1;
    uniform sampler2D texture_2;
    
    layout(location = 0) out vec4 result_color;
    in vec4 color;
    in vec2 uv;
    
    void main()
    {
        switch (fs_params[0].x)
        {
            case 0:
            {
                result_color = color;
                break;
            }
            case 1:
            {
                result_color = texture(texture_1, uv);
                break;
            }
            case 2:
            {
                result_color = texture(texture_1, uv) * color;
                break;
            }
            default:
            {
                result_color = vec4(0.0);
                break;
            }
        }
        if (fs_params[0].y == 2)
        {
            result_color *= texture(texture_2, uv);
        }
    }
    
*/
static const char scene_fs_source_glsl330[723] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x31,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x32,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x73,
    0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x30,0x5d,0x2e,0x78,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x30,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,
    0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,
    0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x31,0x2c,0x20,0x75,0x76,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,
    0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x31,0x2c,0x20,0x75,0x76,0x29,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,
    0x74,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,
    0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x66,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x20,0x3d,0x3d,0x20,
    0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x32,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    out vec2 uv;
    
    vec4 triangle_position(int vertex_index)
    {
        return vec4((-1.0) + float((vertex_index & 1) << 2), (-1.0) + float((vertex_index & 2) << 1), 0.0, 1.0);
    }
    
    vec2 triangle_uv(int vertex_index)
    {
        return vec2((vertex_index == 1) ? 2.0 : 0.0, (vertex_index == 2) ? 2.0 : 0.0);
    }
    
    void main()
    {
        int param = gl_VertexID;
        gl_Position = triangle_position(param);
        int param_1 = gl_VertexID;
        uv = triangle_uv(param_1);
    }
    
*/
static const char quad_vs_source_glsl330[459] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x34,
    0x20,0x74,0x72,0x69,0x61,0x6e,0x67,0x6c,0x65,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x28,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,
    0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x2d,0x31,0x2e,0x30,0x29,0x20,0x2b,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,
    0x64,0x65,0x78,0x20,0x26,0x20,0x31,0x29,0x20,0x3c,0x3c,0x20,0x32,0x29,0x2c,0x20,
    0x28,0x2d,0x31,0x2e,0x30,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x26,0x20,0x32,
    0x29,0x20,0x3c,0x3c,0x20,0x31,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,0x74,0x72,0x69,0x61,
    0x6e,0x67,0x6c,0x65,0x5f,0x75,0x76,0x28,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x28,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3d,0x3d,0x20,0x31,0x29,0x20,
    0x3f,0x20,0x32,0x2e,0x30,0x20,0x3a,0x20,0x30,0x2e,0x30,0x2c,0x20,0x28,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3d,0x3d,0x20,0x32,0x29,
    0x20,0x3f,0x20,0x32,0x2e,0x30,0x20,0x3a,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x74,
    0x72,0x69,0x61,0x6e,0x67,0x6c,0x65,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x56,0x65,
    0x72,0x74,0x65,0x78,0x49,0x44,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,
    0x20,0x74,0x72,0x69,0x61,0x6e,0x67,0x6c,0x65,0x5f,0x75,0x76,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform usampler2D input_texture;
    
    in vec2 uv;
    layout(location = 0) out vec4 result_color;
    
    vec4 from_rgb565(uint color)
    {
        vec4 result;
        vec4 _97 = result;
        _97.x = float(((((color & 63488u) >> uint(11)) * 527u) + 23u) >> uint(6)) * 0.0039215688593685626983642578125;
        vec4 _99 = _97;
        _99.y = float(((((color & 2016u) >> uint(5)) * 259u) + 33u) >> uint(6)) * 0.0039215688593685626983642578125;
        vec4 _101 = _99;
        _101.z = float((((color & 31u) * 527u) + 23u) >> uint(6)) * 0.0039215688593685626983642578125;
        vec4 _103 = _101;
        _103.w = 1.0;
        result = _103;
        return _103;
    }
    
    void main()
    {
        uint param = texture(input_texture, vec2(uv.x, 1.0 - uv.y)).x;
        result_color = from_rgb565(param);
    }
    
*/
static const char back_buffer_fs_source_glsl330[748] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x69,0x6e,0x70,0x75,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x6f,0x6d,0x5f,0x72,0x67,0x62,0x35,0x36,0x35,0x28,0x75,0x69,0x6e,0x74,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x5f,0x39,0x37,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x39,0x37,0x2e,0x78,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x28,0x28,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x26,0x20,0x36,
    0x33,0x34,0x38,0x38,0x75,0x29,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,
    0x31,0x29,0x29,0x20,0x2a,0x20,0x35,0x32,0x37,0x75,0x29,0x20,0x2b,0x20,0x32,0x33,
    0x75,0x29,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x36,0x29,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,
    0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,
    0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x39,0x39,
    0x20,0x3d,0x20,0x5f,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x39,0x39,0x2e,
    0x79,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x28,0x28,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x26,0x20,0x32,0x30,0x31,0x36,0x75,0x29,0x20,0x3e,0x3e,0x20,
    0x75,0x69,0x6e,0x74,0x28,0x35,0x29,0x29,0x20,0x2a,0x20,0x32,0x35,0x39,0x75,0x29,
    0x20,0x2b,0x20,0x33,0x33,0x75,0x29,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x36,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,
    0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,
    0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x30,0x31,0x20,0x3d,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x31,0x30,0x31,0x2e,0x7a,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x28,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x26,0x20,0x33,0x31,0x75,0x29,
    0x20,0x2a,0x20,0x35,0x32,0x37,0x75,0x29,0x20,0x2b,0x20,0x32,0x33,0x75,0x29,0x20,
    0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x36,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,
    0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x30,0x33,0x20,0x3d,
    0x20,0x5f,0x31,0x30,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x33,0x2e,
    0x77,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x31,0x30,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x31,0x30,0x33,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6e,0x70,0x75,0x74,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x75,0x76,0x2e,0x78,0x2c,
    0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x75,0x76,0x2e,0x79,0x29,0x29,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x66,0x72,0x6f,0x6d,0x5f,0x72,0x67,0x62,0x35,0x36,0x35,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D offscreen_texture;
    
    layout(location = 0) out vec4 result_color;
    in vec2 uv;
    
    void main()
    {
        result_color = texture(offscreen_texture, uv);
    }
    
*/
static const char flush_fs_source_glsl330[178] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x6f,0x66,0x66,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x6f,0x66,0x66,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before sokol-shader.h"
#endif
static inline const sg_shader_desc* back_buffer_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = quad_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = back_buffer_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "input_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_UINT;
      desc.label = "back_buffer_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* flush_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = quad_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = flush_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "offscreen_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "flush_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* scene_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.attrs[1].name = "color0";
      desc.attrs[2].name = "uv0";
      desc.vs.source = scene_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = scene_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_INT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "texture_1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "texture_2";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "scene_shader";
    }
    return &desc;
  }
  return 0;
}
